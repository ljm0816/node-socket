#!/usr/bin/env node
//===================================server config=============================================

/**
 * Module dependencies. 依赖加载
 */

//工具类
var utils = require("../core/util/utils");
//配置文件
var config = require('../core/conf/config');
var debug = require('debug')( config.initBase.base.SERVER_NAME + ':server');
var http  = require('http');
var app = require('../app');



//从环境||配置文件获取端口
var port = utils.normalizePort(process.env.PORT || config.initBase.base.SERVER_PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

//创建http服务
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + '无权限启动');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error("启动失败,"+ bind + ' 已经被使用...');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  console.log("["+config.initBase.base.SERVER_NAME+' 启动成功,端口号:' + addr.port+"]");
}

//======================socket.io======================
var socketIo = require('../core/util/socketio');
socketIo.socketInit(server);
